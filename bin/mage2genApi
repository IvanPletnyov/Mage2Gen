#!/usr/bin/env python3
import flask
import json
import sys
import os
import cmd
import mage2gen
from mage2gen import Snippet, SnippetParam
from mage2gen.utils import upperfirst
from collections import defaultdict, OrderedDict

app = flask.Flask(__name__)


def to_json(data):
	return json.dumps(data) + "\n"


def resp(code, data):
	return flask.Response(
		status=code,
		headers={'Content-Type': 'application/json'},
		response=to_json(data)
	)


@app.route('/configurations', methods=['GET'])
def get_config():
	# Return configurations for create module.
	result = {
		'module': {
			'label': 'General',
			'required': True,
			'params': {
				'package_name': {
					'label': 'Package name',
					'type': 'string',
					'required': True
				},
				'module_name': {
					'label': 'Module name',
					'type': 'string',
					'required': True
				},
				'description': {
					'label': 'Description',
					'type': 'string',
					'required': False
				},
				'save_path': {
					'label': 'Save module path',
					'type': 'string',
					'required': True
				}
			}
		}
	}

	for snippet_name, snippet in load_snippets().items():
		result[snippet_name] = {
			'label': snippet.snippet_label,
			'required': False,
			'params': snippet_params_to_dict(snippet.params()),
			'extra_params': snippet_params_to_dict(snippet.extra_params()),
		}

	return resp(200, result)


def snippet_params_to_dict(params):
	# Build dictionary from snippet params.
	result = {}
	tab = None

	for param in params:
		if isinstance(param, str):
			tab = param
			continue

		if param.depend is None:
			result[param.name] = {
				'label': param.name_label(),
				'required': param.required,
				'tab': tab
			}
			input_type = 'string'
			if param.choises is not None:
				input_type = 'select'

				if param.default is not None and isinstance(param.default, list):
					input_type = 'multiselect'

				result[param.name]['resource'] = {}
				for value, label in param.choises:
					result[param.name]['resource'][value] = label
			elif param.yes_no:
				input_type = 'checkbox'
			result[param.name]['type'] = input_type

			if param.default is not None:
				result[param.name]['default'] = param.default

			if param.regex_validator is not None:
				result[param.name]['regex_validator'] = param.regex_validator

	return result


@app.route('/generate', methods=['POST'])
def post_generate_module():
	# Generate module by provided snippets.

	request = flask.request.get_json()

	# First validate provided data.
	errors = validate_request(request)
	if errors:
		return resp(400, {"errors": errors})

	save_path = request['save_path']
	module_params = request['module']
	snippets_params = request['snippets']

	# Create module object.
	description = ''
	if module_params['description'] is not None:
		description = module_params['description']
	module = mage2gen.Module(
		package=module_params['package_name'],
		name=module_params['module_name'],
		description=description
	)

	# Create snippets for module from request.
	for snippet_name, snippet in load_snippets().items():
		if snippets_params.get(snippet_name, None) is None:
			continue

		request_snippet_params = snippets_params[snippet_name]
		if request_snippet_params['params'] is None:
			raise Exception('Snippet ' + snippet_name + ' key "params" is required.')

		snippet_with_params = snippet(module)
		for request_snippet_param_item in request_snippet_params['params']:
			build_snippet_params = OrderedDict()
			for param in snippet.params():
				if param.required is True and request_snippet_param_item[param.name] is None:
					raise Exception('Snippet ' + snippet_name + ", parameter " + param.name + " is required.")
				request_snippet_param_item_value = request_snippet_param_item.get(param.name, param.default)
				try:
					param.validate(request_snippet_param_item_value)
				except Exception as e:
					raise Exception('Snippet ' + snippet_name + ", parameter "
									+ param.name + " validation error: " + str(e))

				build_snippet_params[param.name] = request_snippet_param_item[param.name]

			build_snippet_extra_params = {}
			if request_snippet_param_item.get('extra_params', None) is not None:
				for extra_param in snippet.extra_params():
					if isinstance(extra_param, str) \
							or request_snippet_param_item['extra_params'].get(extra_param.name, None) is None:
						continue

					if extra_param.required is True \
							and request_snippet_param_item['extra_params'][extra_param.name] is None:
						raise Exception('Snippet ' + snippet_name + ", parameter " + extra_param.name + " is required.")
					request_snippet_param_item_value = request_snippet_param_item['extra_params']\
						.get(extra_param.name, extra_param.default)
					try:
						extra_param.validate(request_snippet_param_item_value)
					except Exception as e:
						raise Exception('Snippet ' + snippet_name + ", parameter "
										+ extra_param.name + " validation error: " + str(e))

					build_snippet_extra_params[extra_param.name] \
						= request_snippet_param_item['extra_params'][extra_param.name]

			build_snippet_params['extra_params'] = build_snippet_extra_params
			snippet_with_params.add(**build_snippet_params)

	module.generate_module(save_path)

	return resp(200, {'module_generated': True})


@app.errorhandler(400)
def page_not_found(exception):
	return resp(400, {
		"error_text": exception.description,
		"error_code": exception.code
	})


@app.errorhandler(404)
def page_not_found():
	return resp(404, {
		"error_text": "Requested URL not found.",
		"error_code": 404
	})


@app.errorhandler(Exception)
def internal_error(exception):
	error_text = "Something went wrong: " + str(exception)
	if isinstance(exception, KeyError):
		error_text = 'Undefined key: ' + str(exception)

	return resp(500, {
		"error_code": 500,
		"error_text": error_text,
	})


def load_snippets():
	# Load all snippets available in system.
	snippets = {}
	for snippet in Snippet.snippets():
		snippets[snippet.name().lower()] = snippet

	return snippets


def validate_request(request_json_body):
	errors = []
	if request_json_body is None or len(request_json_body) is 0:
		errors.append("No JSON sent. Please check sent JSON and try again.")
	elif request_json_body['save_path'] is None:
		errors.append("Please specify save path.")
	elif os.path.exists(request_json_body['save_path']) is False:
		errors.append(request_json_body.save_path + ' is not a dir.')
	elif request_json_body['snippets'] is None:
		errors.append('Request must contain snippets.')
	elif request_json_body['module'] is None:
		errors.append('Key "module" is required.')
	elif request_json_body['module']['package_name'] is None \
			or request_json_body['module']['package_name'] == '':
		errors.append('In "module" parameter "package_name" is required.')
	elif request_json_body['module']['module_name'] is None \
			or request_json_body['module']['module_name'] == '':
		errors.append('In "module" parameter "module_name" is required.')

	return errors


if __name__ == '__main__':
	app.run()
